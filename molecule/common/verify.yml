---

- name: Register available tests
  local_action: set_fact
  args:
    molecule_tests: >
      {{ molecule_tests | default([]) | union([item | basename | splitext | first]) }}
  with_fileglob:
    - "{{test_path}}/test_*.yml"
  run_once: true

- name: Setup test directory
  file:
    path: "{{test_workdir}}"
    state: directory
    mode: 0755

- name: Copy Goss tests to remote
  copy:
    src: "{{test_path}}/{{item}}.yml"
    dest: "{{goss_test_directory}}/{{scenario}}/{{item}}.yml"
  with_items: "{{ molecule_tests }}"

- name: Clean up previous logs
  file:
    path: "{{goss_test_directory}}/{{scenario}}/{{item}}.log"
    state: absent
  with_items: "{{ molecule_tests }}"

- name: Execute Goss tests
  shell: >
    {{ goss_dst }} --vars {{goss_test_variables}}             \
                   -g {{item}}.yml validate                   \
                   --format {{ goss_format }} > {{item}}.log
  args:
    chdir: "{{test_workdir}}"
  ignore_errors: true
  register: test_results
  with_items: "{{ molecule_tests }}"

- name: Setup log directory
  local_action: file
  args:
    path: "{{log_path}}"
    state: directory
    mode: 0755

- name: Save Goss test results
  fetch:
    src: "{{test_workdir}}/{{item}}.log"
    dest: "{{log_path}}/"
    flat: true
  with_items: "{{molecule_tests}}"

- name: Fail when tests fail
  fail:
    msg: "Goss failed to validate"
  when: true in test_results | json_query('results[*].failed')
